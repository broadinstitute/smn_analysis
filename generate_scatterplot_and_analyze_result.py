import pandas as pd
import argparse
import os
import matplotlib.pyplot as plt



def parse_args():
    """Parse and return command-line args"""
    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--output-tsv", default="output.tsv", help="Output tsv file path")
    parser.add_argument("-v", "--verbose", action="store_true", help="Whether to print extra stats and output")
    parser.add_argument("tsv_paths", nargs="+", help="One or more tsv file paths")
    args = parser.parse_args()

    # make sure the input files exist
    for path in args.tsv_paths:
        if not os.path.isfile(path):
            parser.error(f"File not found: {path}")

    return args

def pltcolor(sma_status):
    sma_colors = []
    for sample in sma_status:
        if sample=='Unknown':
            sma_colors.append('grey')
        elif sample=='Not Affected':
            sma_colors.append('blue')
        else:
            sma_colors.append('red')
    return sma_colors

def filter_input(df):
    a = df.loc[(df['c_count'] <= 0.01 * df['total_count']) & (df['total_count'] >= 5)]
    value = {"SampleId":a.sample_id,
             "SMA_status":a.SMA_status,
             "c_count":a.c_count,
             "total_count":a.total_count,
             "project_name":a.project_name,
             "coded_phenotype":a.coded_phenotype,
             "phenotypes": a.phenotypes}
    return pd.DataFrame(value)

"""
scatter plot of the data generated by smn_analysis.py
"""
def main():
    args = parse_args()
    if args.verbose:
        print(f"Processing {len(args.tsv_paths)} TSV files")
    for tsv_path in args.tsv_paths:
        df = pd.read_csv(tsv_path, sep='\t')
        smn_c_count = df['c_count']
        smn_total = df['total_count']
        sma_status = df['SMA_status']
        x = list(smn_c_count)
        y = list(smn_total)
        filter_input(df).to_csv(args.output_tsv, sep="\t")
        sma_colors = pltcolor(sma_status)
        plt.xlim(-5, 700)
        plt.ylim(-5, 700)
        plt.scatter(x=x,y=y,c = sma_colors, marker='+', alpha=0.5)
        plt.xlabel('SMN Reads with C')
        plt.ylabel('SMN c.840 position Total Reads')
        plt.title('SMN Reads with C  vs. Total Reads at c.840 Position')
        plt.savefig('C_vs_total.png', dpi = 300)

if __name__ == "__main__":
    main()